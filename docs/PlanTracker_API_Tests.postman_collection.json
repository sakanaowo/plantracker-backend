{
    "info": {
        "name": "PlanTracker API - Complete Tests",
        "description": "Complete test collection for all 27 new endpoints: Labels, Comments, Attachments, Project Members",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:3000/api",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "1. Labels API",
            "item": [
                {
                    "name": "1.1 Create Label",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Bug\",\n  \"color\": \"red\",\n  \"description\": \"Bug fixes and issues\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/projects/{{projectId}}/labels",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "workspaces",
                                "{{workspaceId}}",
                                "labels"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Label created successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id');",
                                    "    pm.expect(jsonData.name).to.equal('Bug');",
                                    "    pm.expect(jsonData.color).to.equal('red');",
                                    "    pm.environment.set(\"labelId\", jsonData.id);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "1.2 List Workspace Labels",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/projects/{{projectId}}/labels",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "workspaces",
                                "{{workspaceId}}",
                                "labels"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Returns array of labels\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "1.3 Update Label",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Critical Bug\",\n  \"description\": \"Critical bugs requiring immediate attention\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/labels/{{labelId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "labels",
                                "{{labelId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "1.4 Assign Label to Task",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"labelId\": \"{{labelId}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/tasks/{{taskId}}/labels",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "tasks",
                                "{{taskId}}",
                                "labels"
                            ]
                        }
                    }
                },
                {
                    "name": "1.5 Get Task Labels",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/tasks/{{taskId}}/labels",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "tasks",
                                "{{taskId}}",
                                "labels"
                            ]
                        }
                    }
                },
                {
                    "name": "1.6 Remove Label from Task",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/tasks/{{taskId}}/labels/{{labelId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "tasks",
                                "{{taskId}}",
                                "labels",
                                "{{labelId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "1.7 Delete Label",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/labels/{{labelId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "labels",
                                "{{labelId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "2. Comments API",
            "item": [
                {
                    "name": "2.1 Create Comment",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"content\": \"This is a test comment with @[{{userId}}] mention\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/tasks/{{taskId}}/comments",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "tasks",
                                "{{taskId}}",
                                "comments"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Comment created\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id');",
                                    "    pm.environment.set(\"commentId\", jsonData.id);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "2.2 List Comments (Paginated)",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/tasks/{{taskId}}/comments?limit=20&sort=desc",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "tasks",
                                "{{taskId}}",
                                "comments"
                            ],
                            "query": [
                                {
                                    "key": "limit",
                                    "value": "20"
                                },
                                {
                                    "key": "sort",
                                    "value": "desc"
                                },
                                {
                                    "key": "cursor",
                                    "value": "{{commentCursor}}",
                                    "disabled": true
                                }
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Returns paginated data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('data');",
                                    "    pm.expect(jsonData).to.have.property('pagination');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "2.3 Update Comment",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"content\": \"Updated comment content\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/comments/{{commentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "comments",
                                "{{commentId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "2.4 Delete Comment",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/comments/{{commentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "comments",
                                "{{commentId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "3. Attachments API",
            "item": [
                {
                    "name": "3.1 Request Upload URL",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"fileName\": \"screenshot.png\",\n  \"fileSize\": 1024000,\n  \"mimeType\": \"image/png\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/tasks/{{taskId}}/attachments/upload-url",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "tasks",
                                "{{taskId}}",
                                "attachments",
                                "upload-url"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Upload URL generated\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('uploadUrl');",
                                    "    pm.environment.set(\"uploadUrl\", jsonData.uploadUrl);",
                                    "    console.log(\"Upload URL:\", jsonData.uploadUrl);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "3.2 List Task Attachments",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/tasks/{{taskId}}/attachments",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "tasks",
                                "{{taskId}}",
                                "attachments"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Returns attachments array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "    if (jsonData.length > 0) {",
                                    "        pm.environment.set(\"attachmentId\", jsonData[0].id);",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "3.3 Get Attachment View URL",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/attachments/{{attachmentId}}/view",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "attachments",
                                "{{attachmentId}}",
                                "view"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"View URL generated\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('viewUrl');",
                                    "    console.log(\"View URL (valid for 1 hour):\", jsonData.viewUrl);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "3.4 Delete Attachment",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/attachments/{{attachmentId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "attachments",
                                "{{attachmentId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "4. Project Members API",
            "item": [
                {
                    "name": "4.1 Invite Member",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"member@example.com\",\n  \"role\": \"MEMBER\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/projects/{{projectId}}/members/invite",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "projects",
                                "{{projectId}}",
                                "members",
                                "invite"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Member invited\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id');",
                                    "    pm.environment.set(\"memberId\", jsonData.id);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "4.2 List Project Members",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/projects/{{projectId}}/members",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "projects",
                                "{{projectId}}",
                                "members"
                            ]
                        }
                    },
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Returns members list\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('data');",
                                    "    pm.expect(jsonData).to.have.property('count');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "4.3 Update Member Role",
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"role\": \"ADMIN\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/projects/{{projectId}}/members/{{memberId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "projects",
                                "{{projectId}}",
                                "members",
                                "{{memberId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "4.4 Remove Member",
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/projects/{{projectId}}/members/{{memberId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "projects",
                                "{{projectId}}",
                                "members",
                                "{{memberId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "4.5 Convert to TEAM Project",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"keepCurrentMembers\": true\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/projects/{{projectId}}/convert-to-team",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "projects",
                                "{{projectId}}",
                                "convert-to-team"
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Check if token exists",
                    "const token = pm.environment.get(\"authToken\");",
                    "if (!token) {",
                    "    console.warn(\"⚠️ Warning: No auth token found. Please login first.\");",
                    "}"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Common tests for all requests",
                    "pm.test(\"Response time is acceptable\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});",
                    "",
                    "// Log errors for debugging",
                    "if (pm.response.code >= 400) {",
                    "    console.error(\"❌ Error Response:\", pm.response.json());",
                    "}"
                ]
            }
        }
    ]
}